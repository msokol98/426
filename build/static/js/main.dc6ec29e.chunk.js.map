{"version":3,"sources":["game.js","utils.js","boardContainer.js","App.js","index.js"],"names":["Game","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","isGameWon","board","i","j","isGameOver","col","row","onMove","callback","moveCallback","onWin","winCallback","onLose","loseCallback","this","setupNewGame","blankGrid","addNumber","gameState","convertTo1D","score","won","over","openings","push","target","direction","turned","transposed","notArrowKey","convertTo2D","turnBoard","transposeBoard","copy","duplicate","handle","different","isDifferent","translate","merge","grid","Array","fill","board2D","forEach","value","idx","board1D","counter","arr1","arr2","rowNumbers","filter","number","concat","val1","val2","combinedValue","reverse","transposedBoard","console","log","getColor","2","4","8","16","32","64","128","256","512","1024","2048","getFontSize","BoardContainer","game","useEventListener","key","move","className","map","style","backgroundColor","fontSize","App","state","setCallback","updatedGame","setState","class","onClick","resetGame","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc6ec29e.chunk.js","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        this.addNumber(board);\n        this.addNumber(board);\n\n        this.gameState = {\n            board: this.convertTo1D(board),\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    loadGame(gameState) {\n        this.gameState = gameState;\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber();\n    }\n\n    move(direction) {\n        let turned = false, transposed = false, notArrowKey = false;\n        let board = this.convertTo2D(this.gameState.board);\n\n        switch(direction) {\n            case 'up':\n                board = this.turnBoard(board);\n                turned = true;\n                break;\n            case 'left':\n                board  = this.transposeBoard(board);\n                board = this.turnBoard(board);\n                turned = true;\n                transposed = true;\n                break;\n            case 'right':\n                board = this.transposeBoard(board);\n                transposed = true;\n                break;\n            default: notArrowKey = direction !== 'down';\n        }\n\n        if(notArrowKey)\n            return;\n\n        const copy = this.duplicate(board);\n\n        for(let i = 0; i < this.dimension; i++) \n            board[i] = this.handle(board[i]);\n\n        const different = this.isDifferent(copy, board);\n\n        if(turned)\n            board = this.turnBoard(board);\n        \n        if(transposed)\n            board = this.transposeBoard(board);\n\n        if(different)\n            this.addNumber(board);\n\n        \n        this.gameState.over = this.isGameOver(board);\n        this.gameState.won = this.isGameWon(board);\n\n        if(this.gameState.won && this.winCallback)\n            this.winCallback();\n        else if(!this.gameState.won && this.gameState.over && this.loseCallback)\n            this.loseCallback();\n        \n        this.gameState.board = this.convertTo1D(board);\n        this.moveCallback(this);\n    }\n\n    handle(row) {\n        return this.translate(this.merge(this.translate(row)));\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n\n    convertTo2D(board) {\n        const board2D = this.blankGrid();\n        board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n        return board2D;\n    }\n\n    convertTo1D(board) {\n        const { dimension } = this, board1D = Array(dimension*dimension).fill(0);\n\n        let counter = 0;\n\n        for(let row = 0; row < dimension; row++) {\n            for(let col = 0; col < dimension; col++) {\n                board1D[counter++] = board[col][row];\n            }\n        }\n        return board1D;\n    }\n\n    duplicate(board) {\n        const { dimension } = this, copy = this.blankGrid();\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                copy[col][row] = board[col][row];\n            }\n        }\n\n        return copy;\n    }\n\n    isDifferent(arr1, arr2) {\n        const { dimension } = this;\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (arr1[i][j] !== arr2[i][j]) \n                    return true;\n            }\n        }\n        return false;\n    }\n\n    translate(row) {\n        const rowNumbers = row.filter(number => number);\n        const empties = Array(this.dimension-rowNumbers.length).fill(0);\n        return empties.concat(rowNumbers);\n    }\n\n    merge(row) {\n        for (let i = this.dimension-1; i >= 1; i--) {\n            const val1 = row[i];\n            const val2 = row[i-1];\n\n            if (val1 === val2) {\n                const combinedValue = val1 + val2;\n                row[i] = combinedValue;\n                this.gameState.score += combinedValue;\n                row[i-1] = 0;\n            }\n        }\n        return row;\n    }\n\n    turnBoard(board) {\n        for(let i = 0; i < this.dimension; i++) \n            board[i].reverse();\n        return board;\n    }\n\n    transposeBoard(board) {\n        const transposedBoard = this.blankGrid(), { dimension } = this;\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                transposedBoard[col][row] = board[row][col];\n            }\n        }\n        \n        return transposedBoard;\n    }\n\n    isGameWon = board => {\n        const { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n          for (let j = 0; j < dimension; j++) {\n            if (board[i][j] === 2048) {\n              return true;\n            }\n          }\n        }\n        return false;\n    }\n\n    isGameOver = board => {\n\n        const { dimension } = this;\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                \n                if ((board[col][row] === 0) || (col !== dimension-1 && board[col][row] === board[col + 1][row]) \n                        || (row !== dimension-1 && board[col][row] === board[col][row + 1])) \n                    return false;\n            \n            }\n        }\n        return true;\n    }\n\n    getGameState() {\n        return this.gameState;\n    }\n\n    toString() {\n        const board = this.convertTo2D(this.gameState.board), { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            console.log(board[i]);\n        }\n    }\n\n    onMove = callback => this.moveCallback = callback;\n    onWin = callback => this.winCallback = callback;\n    onLose = callback => this.loseCallback = callback;\n\n}\n\nexport default Game;","export const getColor = number => {\n    const colors = {\n        2: \"#4A6075\",\n        4: \"#6C78EF\",\n        8: \"#20347D\",\n        16: \"#79779A\",\n        32: \"#55537E\",\n        64: \"#9370DB\",\n        128: \"#BFA36D\",\n        256: \"#7665C2\",\n        512: \"#B4976D\",\n        1024: \"#91744B\",\n        2048: \"#DDC5A2\"\n    }\n\n    return colors[number];\n}\n\nexport const getFontSize = number => {\n    if(number < 100)\n        return \"auto\";\n    \n    if(number < 1000)\n        return \"3rem\";\n\n    return \"2.7rem\";\n}","import React from 'react';\nimport useEventListener from '@use-it/event-listener';\nimport { getColor, getFontSize } from './utils';\n\nconst BoardContainer = ({ game }) => {\n\n    function handler({ key }) {\n        switch(key) {\n            case 'ArrowUp': \n                game.move('up');\n                break;\n            case 'ArrowDown':\n                game.move('down');\n                break;\n            case 'ArrowRight':\n                game.move('right');\n                break;\n            case 'ArrowLeft':\n                game.move('left');\n                break;\n            default: \n        }\n    }\n\n    useEventListener('keydown', handler);\n\n    return(\n        game && <div className=\"game-board\">\n\n          {game.gameState.board.map((number, i) => (\n             <div key={i} style={{backgroundColor: getColor(number), fontSize: getFontSize(number)}}>\n                 {number !== 0 && number}</div>\n          ))}\n\n        </div>\n    )\n}\n\nexport default BoardContainer;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Game from './game';\nimport Board from './boardContainer';\n\nconst game = new Game(4);\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = { game };\n  }\n\n  componentDidMount() {\n    this.setCallback();\n  }\n\n  setCallback() {\n    game.onMove(updatedGame => this.setState({game: updatedGame}));\n    this.setState({ game });\n  }\n\n  resetGame() {\n    this.state.game.setupNewGame();\n    this.setState({game});\n  }\n\n  render() {\n\n    let { game } = this.state;\n    const { won, over } = game && game.gameState;\n\n    if(game) \n      game.board = game.convertTo2D(game.gameState.board)\n\n    return (\n      <div className=\"App\">\n\n        <h3 className=\"header\">2048 for COMP 426</h3>\n\n        <div class=\"flex-row\">\n          <h2>Score: {game.gameState.score}</h2>\n          <button onClick={() => this.resetGame()}>Reset Game</button>\n        </div>\n\n        {won && <h2 className=\"won\">You won the game!!!</h2>}\n        {!won && over && <h2 className=\"over\">The game is over...</h2>}\n\n        {game && game.gameState && \n          <Board game={game} />}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}