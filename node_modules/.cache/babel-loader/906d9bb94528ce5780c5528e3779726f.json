{"ast":null,"code":"class Game {\n  constructor(dimension) {\n    this.getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n\n    this.getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    this.onMove = callback => this.moveCallback = callback;\n\n    this.dimension = dimension;\n    this.setupNewGame();\n  }\n\n  setupNewGame() {\n    const board = this.blankGrid();\n    this.addNumber(board);\n    this.addNumber(board);\n    this.gameState = {\n      board: this.convertTo1D(board),\n      score: 0,\n      won: false,\n      over: false\n    };\n  }\n\n  addNumber(board) {\n    const openings = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (board[i][j] === 0) openings.push({\n          col: i,\n          row: j\n        });\n      }\n    }\n\n    if (openings.length === 0) return;\n    const target = openings[this.getRandomArrayIndex(openings)];\n    board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n  }\n\n  blankGrid() {\n    const grid = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      grid.push(Array(dimension).fill(0));\n    }\n\n    return grid;\n  }\n\n  convertTo2D(board) {\n    const board2D = this.blankGrid();\n    board.forEach((value, idx) => board2D[idx / this.dimension][idx / this.dimension] = value);\n  }\n\n  convertTo1D(board) {\n    const {\n      dimension\n    } = this,\n          board1D = Array(dimension * dimension).fill(0);\n    let counter = 0;\n\n    for (let row = 0; row < dimension; row++) {\n      for (let col = 0; col < dimension; col++) {\n        board1D[counter++] = board[col][row];\n      }\n    }\n\n    return board1D;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/2048/src/Game.js"],"names":["Game","constructor","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","onMove","callback","moveCallback","setupNewGame","board","blankGrid","addNumber","gameState","convertTo1D","score","won","over","openings","i","j","push","col","row","target","grid","Array","fill","convertTo2D","board2D","forEach","value","idx","board1D","counter"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AAEPC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAoCvBC,eApCuB,GAoCL,MAAMC,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAArB,GAAyB,CApC1B;;AAAA,SAqCvBC,mBArCuB,GAqCDC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWD,GAAG,CAACE,MAAJ,GAAaL,IAAI,CAACC,MAAL,EAAxB,CArCN;;AAAA,SA+CvBK,MA/CuB,GA+CdC,QAAQ,IAAI,KAAKC,YAAL,GAAoBD,QA/ClB;;AACnB,SAAKT,SAAL,GAAiBA,SAAjB;AACA,SAAKW,YAAL;AACH;;AAEDA,EAAAA,YAAY,GAAG;AACX,UAAMC,KAAK,GAAI,KAAKC,SAAL,EAAf;AACA,SAAKC,SAAL,CAAeF,KAAf;AACA,SAAKE,SAAL,CAAeF,KAAf;AAEA,SAAKG,SAAL,GAAiB;AACbH,MAAAA,KAAK,EAAE,KAAKI,WAAL,CAAiBJ,KAAjB,CADM;AAEbK,MAAAA,KAAK,EAAE,CAFM;AAGbC,MAAAA,GAAG,EAAE,KAHQ;AAIbC,MAAAA,IAAI,EAAE;AAJO,KAAjB;AAMH;;AAEDL,EAAAA,SAAS,CAACF,KAAD,EAAQ;AACb,UAAMQ,QAAQ,GAAG,EAAjB;AAAA,UAAqB;AAAEpB,MAAAA;AAAF,QAAgB,IAArC;;AAEA,SAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,SAApB,EAA+BqB,CAAC,EAAhC,EAAoC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,SAApB,EAA+BsB,CAAC,EAAhC,EAAoC;AAChC,YAAIV,KAAK,CAACS,CAAD,CAAL,CAASC,CAAT,MAAgB,CAApB,EACIF,QAAQ,CAACG,IAAT,CAAc;AAACC,UAAAA,GAAG,EAAEH,CAAN;AAASI,UAAAA,GAAG,EAAEH;AAAd,SAAd;AAEP;AACJ;;AAED,QAAGF,QAAQ,CAACb,MAAT,KAAoB,CAAvB,EACI;AAEJ,UAAMmB,MAAM,GAAGN,QAAQ,CAAC,KAAKhB,mBAAL,CAAyBgB,QAAzB,CAAD,CAAvB;AACAR,IAAAA,KAAK,CAACc,MAAM,CAACF,GAAR,CAAL,CAAkBE,MAAM,CAACD,GAAzB,IAAgC,KAAKxB,eAAL,KAAyB,GAAzB,GAA+B,CAA/B,GAAmC,CAAnE;AACH;;AAKDY,EAAAA,SAAS,GAAG;AACR,UAAMc,IAAI,GAAG,EAAb;AAAA,UAAiB;AAAE3B,MAAAA;AAAF,QAAgB,IAAjC;;AACA,SAAI,IAAIqB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGrB,SAAnB,EAA8BqB,CAAC,EAA/B,EAAmC;AAC/BM,MAAAA,IAAI,CAACJ,IAAL,CAAUK,KAAK,CAAC5B,SAAD,CAAL,CAAiB6B,IAAjB,CAAsB,CAAtB,CAAV;AACH;;AACD,WAAOF,IAAP;AACH;;AAIDG,EAAAA,WAAW,CAAClB,KAAD,EAAQ;AACf,UAAMmB,OAAO,GAAG,KAAKlB,SAAL,EAAhB;AACAD,IAAAA,KAAK,CAACoB,OAAN,CAAc,CAACC,KAAD,EAAQC,GAAR,KAAgBH,OAAO,CAACG,GAAG,GAAG,KAAKlC,SAAZ,CAAP,CAA8BkC,GAAG,GAAG,KAAKlC,SAAzC,IAAsDiC,KAApF;AACH;;AAEDjB,EAAAA,WAAW,CAACJ,KAAD,EAAQ;AACf,UAAM;AAAEZ,MAAAA;AAAF,QAAgB,IAAtB;AAAA,UAA4BmC,OAAO,GAAGP,KAAK,CAAC5B,SAAS,GAACA,SAAX,CAAL,CAA2B6B,IAA3B,CAAgC,CAAhC,CAAtC;AAEA,QAAIO,OAAO,GAAG,CAAd;;AAEA,SAAI,IAAIX,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGzB,SAAvB,EAAkCyB,GAAG,EAArC,EAAyC;AACrC,WAAI,IAAID,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAGxB,SAAvB,EAAkCwB,GAAG,EAArC,EAAyC;AACrCW,QAAAA,OAAO,CAACC,OAAO,EAAR,CAAP,GAAqBxB,KAAK,CAACY,GAAD,CAAL,CAAWC,GAAX,CAArB;AACH;AACJ;;AACD,WAAOU,OAAP;AACH;;AAnEM;;AAsEX,eAAerC,IAAf","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        this.addNumber(board);\n        this.addNumber(board);\n\n        this.gameState = {\n            board: this.convertTo1D(board),\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n\n    onMove = callback => this.moveCallback = callback;\n\n    convertTo2D(board) {\n        const board2D = this.blankGrid();\n        board.forEach((value, idx) => board2D[idx / this.dimension][idx / this.dimension] = value)\n    }\n\n    convertTo1D(board) {\n        const { dimension } = this, board1D = Array(dimension*dimension).fill(0);\n\n        let counter = 0;\n\n        for(let row = 0; row < dimension; row++) {\n            for(let col = 0; col < dimension; col++) {\n                board1D[counter++] = board[col][row];\n            }\n        }\n        return board1D;\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}