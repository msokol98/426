{"ast":null,"code":"class Game {\n  constructor(dimension) {\n    this.dimension = dimension;\n    this.setupNewGame();\n  }\n\n  setupNewGame() {\n    board = this.blankGrid();\n    addNumber(board);\n    addNumber(board);\n  }\n\n  addNumber(board) {\n    const openings = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (board[i][j] === 0) {\n          openings.push({\n            x: i,\n            y: j\n          });\n        }\n      }\n    }\n\n    if (options.length > 0) {\n      let spot = random(options);\n      let r = random(1);\n      grid[spot.x][spot.y] = r > 0.1 ? 2 : 4;\n    }\n  }\n\n  blankGrid() {\n    const grid = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      grid.push(Array(dimension).fill(0));\n    }\n\n    return grid;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/2048/src/Game.js"],"names":["Game","constructor","dimension","setupNewGame","board","blankGrid","addNumber","openings","i","j","push","x","y","options","length","spot","random","r","grid","Array","fill"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AAEPC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,YAAL;AACH;;AAEDA,EAAAA,YAAY,GAAG;AACXC,IAAAA,KAAK,GAAI,KAAKC,SAAL,EAAT;AACAC,IAAAA,SAAS,CAACF,KAAD,CAAT;AACAE,IAAAA,SAAS,CAACF,KAAD,CAAT;AACH;;AAEDE,EAAAA,SAAS,CAACF,KAAD,EAAQ;AACb,UAAMG,QAAQ,GAAG,EAAjB;AAAA,UAAqB;AAAEL,MAAAA;AAAF,QAAgB,IAArC;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAApB,EAA+BM,CAAC,EAAhC,EAAoC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,SAApB,EAA+BO,CAAC,EAAhC,EAAoC;AAChC,YAAIL,KAAK,CAACI,CAAD,CAAL,CAASC,CAAT,MAAgB,CAApB,EAAuB;AACnBF,UAAAA,QAAQ,CAACG,IAAT,CAAc;AACdC,YAAAA,CAAC,EAAEH,CADW;AAEdI,YAAAA,CAAC,EAAEH;AAFW,WAAd;AAIH;AACJ;AACJ;;AACD,QAAII,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACpB,UAAIC,IAAI,GAAGC,MAAM,CAACH,OAAD,CAAjB;AACA,UAAII,CAAC,GAAGD,MAAM,CAAC,CAAD,CAAd;AACAE,MAAAA,IAAI,CAACH,IAAI,CAACJ,CAAN,CAAJ,CAAaI,IAAI,CAACH,CAAlB,IAAuBK,CAAC,GAAG,GAAJ,GAAU,CAAV,GAAc,CAArC;AACH;AACJ;;AAEDZ,EAAAA,SAAS,GAAG;AACR,UAAMa,IAAI,GAAG,EAAb;AAAA,UAAiB;AAAEhB,MAAAA;AAAF,QAAgB,IAAjC;;AACA,SAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,SAAnB,EAA8BM,CAAC,EAA/B,EAAmC;AAC/BU,MAAAA,IAAI,CAACR,IAAL,CAAUS,KAAK,CAACjB,SAAD,CAAL,CAAiBkB,IAAjB,CAAsB,CAAtB,CAAV;AACH;;AACD,WAAOF,IAAP;AACH;;AAtCM;;AAyCX,eAAelB,IAAf","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        board  = this.blankGrid();\n        addNumber(board);\n        addNumber(board);\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) {\n                    openings.push({\n                    x: i,\n                    y: j\n                });\n                }\n            }\n        }\n        if (options.length > 0) {\n            let spot = random(options);\n            let r = random(1);\n            grid[spot.x][spot.y] = r > 0.1 ? 2 : 4;\n        }\n    }\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}