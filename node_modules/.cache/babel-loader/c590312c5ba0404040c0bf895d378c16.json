{"ast":null,"code":"class Game {\n  constructor(dimension) {\n    this.getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n\n    this.getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    this.onMove = callback => this.moveCallback = callback;\n\n    this.dimension = dimension;\n    this.setupNewGame();\n  }\n\n  setupNewGame() {\n    const board = this.blankGrid();\n    this.addNumber(board);\n    this.addNumber(board);\n    this.gameState = {\n      board: this.convertTo1D(board),\n      score: 0,\n      won: false,\n      over: false\n    };\n  }\n\n  addNumber(board) {\n    const openings = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (board[i][j] === 0) openings.push({\n          col: i,\n          row: j\n        });\n      }\n    }\n\n    if (openings.length === 0) return;\n    const target = openings[this.getRandomArrayIndex(openings)];\n    board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n  }\n\n  move(direction) {\n    let turned = false,\n        transposed = false,\n        notArrowKey = false;\n    const board = this.convertTo2D(this.gameState.board);\n\n    switch (direction) {\n      case 'up':\n        //turnBoard();\n        turned = true;\n        break;\n\n      case 'left':\n        //turnBoard();\n        //transposeBoard();\n        turned = true;\n        transposed = true;\n        break;\n\n      case 'right':\n        //transposeBoard();\n        transposed = true;\n        break;\n\n      default:\n        notArrowKey = direction !== 'down';\n    }\n\n    if (notArrowKey) return;\n    const copy = this.duplicate();\n\n    for (let i = 0; i < this.dimension; i++) board[i] = this.translate(this.merge(this.translate(board[i])));\n\n    const different = this.isDifferent(copy, board);\n    if (turned) board = turnBoard();\n    if (transposed) board = transposeBoard();\n    if (different) this.addNumber();\n    this.gameState.board = this.convertTo2D(board);\n    this.moveCallback();\n  }\n\n  blankGrid() {\n    const grid = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      grid.push(Array(dimension).fill(0));\n    }\n\n    return grid;\n  }\n\n  convertTo2D(board) {\n    const board2D = this.blankGrid();\n    board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n    return board2D;\n  }\n\n  convertTo1D(board) {\n    const {\n      dimension\n    } = this,\n          board1D = Array(dimension * dimension).fill(0);\n    let counter = 0;\n\n    for (let row = 0; row < dimension; row++) {\n      for (let col = 0; col < dimension; col++) {\n        board1D[counter++] = board[col][row];\n      }\n    }\n\n    return board1D;\n  }\n\n  duplicate(grid) {\n    const {\n      dimension\n    } = this,\n          copy = this.blankGrid();\n\n    for (let col = 0; col < dimension; col++) {\n      for (let row = 0; row < dimension; row++) {\n        copy[col][row] = grid[col][row];\n      }\n    }\n\n    return copy;\n  }\n\n  isDifferent(arr1, arr2) {\n    const {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (arr1[i][j] !== arr2[i][j]) return true;\n      }\n    }\n\n    return false;\n  }\n\n  translate(row) {\n    const rowNumbers = row.filter(number => number);\n    const empties = Array(this.dimension - rowNumbers.length).fill(0);\n    return empties.concat(rowNumbers);\n  }\n\n  merge(row) {\n    for (let i = this.dimension - 1; i >= 1; i--) {\n      const val1 = row[i];\n      const val2 = row[i - 1];\n\n      if (val1 === val2) {\n        row[i] = val1 + val2;\n        row[i - 1] = 0;\n      }\n    }\n\n    return row;\n  }\n\n  turnBoard(board) {}\n\n  transposeBoard(board) {\n    let newGrid = blankGrid();\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        newGrid[i][j] = grid[j][i];\n      }\n    }\n\n    return newGrid;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/2048/src/Game.js"],"names":["Game","constructor","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","onMove","callback","moveCallback","setupNewGame","board","blankGrid","addNumber","gameState","convertTo1D","score","won","over","openings","i","j","push","col","row","target","move","direction","turned","transposed","notArrowKey","convertTo2D","copy","duplicate","translate","merge","different","isDifferent","turnBoard","transposeBoard","grid","Array","fill","board2D","forEach","value","idx","board1D","counter","arr1","arr2","rowNumbers","filter","number","empties","concat","val1","val2","newGrid"],"mappings":"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","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        this.addNumber(board);\n        this.addNumber(board);\n\n        this.gameState = {\n            board: this.convertTo1D(board),\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n    }\n\n    move(direction) {\n        let turned = false, transposed = false, notArrowKey = false;\n        const board = this.convertTo2D(this.gameState.board);\n\n        switch(direction) {\n            case 'up':\n                //turnBoard();\n                turned = true;\n                break;\n            case 'left':\n                //turnBoard();\n                //transposeBoard();\n                turned = true;\n                transposed = true;\n                break;\n            case 'right':\n                //transposeBoard();\n                transposed = true;\n                break;\n            default: notArrowKey = direction !== 'down';\n        }\n\n        if(notArrowKey)\n            return;\n\n        const copy = this.duplicate();\n\n        for(let i = 0; i < this.dimension; i++) \n            board[i] = this.translate(this.merge(this.translate(board[i])));\n        \n\n        const different = this.isDifferent(copy, board);\n\n        if(turned)\n            board = turnBoard();\n        \n        if(transposed)\n            board = transposeBoard();\n\n        if(different)\n            this.addNumber();\n\n        \n        this.gameState.board = this.convertTo2D(board);\n        this.moveCallback();\n\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n\n    onMove = callback => this.moveCallback = callback;\n\n    convertTo2D(board) {\n        const board2D = this.blankGrid();\n        board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n        return board2D;\n    }\n\n    convertTo1D(board) {\n        const { dimension } = this, board1D = Array(dimension*dimension).fill(0);\n\n        let counter = 0;\n\n        for(let row = 0; row < dimension; row++) {\n            for(let col = 0; col < dimension; col++) {\n                board1D[counter++] = board[col][row];\n            }\n        }\n        return board1D;\n    }\n\n    duplicate(grid) {\n        const { dimension } = this, copy = this.blankGrid();\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                copy[col][row] = grid[col][row];\n            }\n        }\n\n        return copy;\n    }\n\n    isDifferent(arr1, arr2) {\n        const { dimension } = this;\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (arr1[i][j] !== arr2[i][j]) \n                    return true;\n            }\n        }\n        return false;\n    }\n\n    translate(row) {\n        const rowNumbers = row.filter(number => number);\n        const empties = Array(this.dimension-rowNumbers.length).fill(0);\n        return empties.concat(rowNumbers);\n    }\n\n    merge(row) {\n        for (let i = this.dimension-1; i >= 1; i--) {\n            const val1 = row[i];\n            const val2 = row[i-1];\n\n            if (val1 === val2) {\n                row[i] = val1 + val2;\n                row[i-1] = 0;\n            }\n        }\n        return row;\n    }\n\n    turnBoard(board) {\n\n    }\n\n    transposeBoard(board) {\nlet newGrid = blankGrid();\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n            newGrid[i][j] = grid[j][i];\n            }\n        }\n        return newGrid;\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}