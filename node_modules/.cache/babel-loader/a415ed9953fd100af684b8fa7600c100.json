{"ast":null,"code":"class Game {\n  constructor(dimension) {\n    this.getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n\n    this.getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    this.dimension = dimension;\n    this.setupNewGame();\n  }\n\n  setupNewGame() {\n    const board = this.blankGrid();\n    this.addNumber(board);\n    this.addNumber(board);\n    this.gameState = {\n      board: board,\n      score: 0,\n      won: false,\n      over: false\n    };\n  }\n\n  addNumber(board) {\n    const openings = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (board[i][j] === 0) openings.push({\n          col: i,\n          row: j\n        });\n      }\n    }\n\n    if (openings.length === 0) return;\n    const target = openings[this.getRandomArrayIndex(openings)];\n    board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n  }\n\n  blankGrid() {\n    const grid = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      grid.push(Array(dimension).fill(0));\n    }\n\n    return grid;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/2048/src/Game.js"],"names":["Game","constructor","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","setupNewGame","board","blankGrid","addNumber","gameState","score","won","over","openings","i","j","push","col","row","target","grid","Array","fill"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AAEPC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAoCvBC,eApCuB,GAoCL,MAAMC,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAArB,GAAyB,CApC1B;;AAAA,SAqCvBC,mBArCuB,GAqCDC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWD,GAAG,CAACE,MAAJ,GAAaL,IAAI,CAACC,MAAL,EAAxB,CArCN;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKQ,YAAL;AACH;;AAEDA,EAAAA,YAAY,GAAG;AACX,UAAMC,KAAK,GAAI,KAAKC,SAAL,EAAf;AACA,SAAKC,SAAL,CAAeF,KAAf;AACA,SAAKE,SAAL,CAAeF,KAAf;AAEA,SAAKG,SAAL,GAAiB;AACbH,MAAAA,KAAK,EAAEA,KADM;AAEbI,MAAAA,KAAK,EAAE,CAFM;AAGbC,MAAAA,GAAG,EAAE,KAHQ;AAIbC,MAAAA,IAAI,EAAE;AAJO,KAAjB;AAMH;;AAEDJ,EAAAA,SAAS,CAACF,KAAD,EAAQ;AACb,UAAMO,QAAQ,GAAG,EAAjB;AAAA,UAAqB;AAAEhB,MAAAA;AAAF,QAAgB,IAArC;;AAEA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,SAApB,EAA+BiB,CAAC,EAAhC,EAAoC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,SAApB,EAA+BkB,CAAC,EAAhC,EAAoC;AAChC,YAAIT,KAAK,CAACQ,CAAD,CAAL,CAASC,CAAT,MAAgB,CAApB,EACIF,QAAQ,CAACG,IAAT,CAAc;AAACC,UAAAA,GAAG,EAAEH,CAAN;AAASI,UAAAA,GAAG,EAAEH;AAAd,SAAd;AAEP;AACJ;;AAED,QAAGF,QAAQ,CAACT,MAAT,KAAoB,CAAvB,EACI;AAEJ,UAAMe,MAAM,GAAGN,QAAQ,CAAC,KAAKZ,mBAAL,CAAyBY,QAAzB,CAAD,CAAvB;AACAP,IAAAA,KAAK,CAACa,MAAM,CAACF,GAAR,CAAL,CAAkBE,MAAM,CAACD,GAAzB,IAAgC,KAAKpB,eAAL,KAAyB,GAAzB,GAA+B,CAA/B,GAAmC,CAAnE;AACH;;AAKDS,EAAAA,SAAS,GAAG;AACR,UAAMa,IAAI,GAAG,EAAb;AAAA,UAAiB;AAAEvB,MAAAA;AAAF,QAAgB,IAAjC;;AACA,SAAI,IAAIiB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGjB,SAAnB,EAA8BiB,CAAC,EAA/B,EAAmC;AAC/BM,MAAAA,IAAI,CAACJ,IAAL,CAAUK,KAAK,CAACxB,SAAD,CAAL,CAAiByB,IAAjB,CAAsB,CAAtB,CAAV;AACH;;AACD,WAAOF,IAAP;AACH;;AA/CM;;AAkDX,eAAezB,IAAf","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        this.addNumber(board);\n        this.addNumber(board);\n\n        this.gameState = {\n            board: board,\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}