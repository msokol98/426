{"ast":null,"code":"class Game {\n  constructor(_dimension) {\n    this.getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n\n    this.getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    this.onMove = callback => this.moveCallback = callback;\n\n    this.wonGame = board => {\n      const {\n        dimension\n      } = this.gameState;\n\n      for (let i = 0; i < dimension; i++) {\n        for (let j = 0; j < dimension; j++) {\n          if (grid[i][j] == 2048) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    this.dimension = _dimension;\n    this.setupNewGame();\n  }\n\n  setupNewGame() {\n    const board = this.blankGrid();\n    this.addNumber(board);\n    this.addNumber(board);\n    this.gameState = {\n      board: this.convertTo1D(board),\n      score: 0,\n      won: false,\n      over: false\n    };\n  }\n\n  addNumber(board) {\n    const openings = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (board[i][j] === 0) openings.push({\n          col: i,\n          row: j\n        });\n      }\n    }\n\n    if (openings.length === 0) return;\n    const target = openings[this.getRandomArrayIndex(openings)];\n    board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n  }\n\n  move(direction) {\n    let turned = false,\n        transposed = false,\n        notArrowKey = false;\n    let board = this.convertTo2D(this.gameState.board);\n\n    switch (direction) {\n      case 'up':\n        board = this.turnBoard(board);\n        turned = true;\n        break;\n\n      case 'left':\n        board = this.transposeBoard(board);\n        board = this.turnBoard(board);\n        turned = true;\n        transposed = true;\n        break;\n\n      case 'right':\n        board = this.transposeBoard(board);\n        transposed = true;\n        break;\n\n      default:\n        notArrowKey = direction !== 'down';\n    }\n\n    if (notArrowKey) return;\n    const copy = this.duplicate(board);\n\n    for (let i = 0; i < this.dimension; i++) board[i] = this.translate(this.merge(this.translate(board[i])));\n\n    const different = this.isDifferent(copy, board);\n    if (turned) board = this.turnBoard(board);\n    if (transposed) board = this.transposeBoard(board);\n    if (different) this.addNumber(board);\n    this.gameState.board = this.convertTo1D(board);\n    this.moveCallback(this);\n  }\n\n  blankGrid() {\n    const grid = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      grid.push(Array(dimension).fill(0));\n    }\n\n    return grid;\n  }\n\n  convertTo2D(board) {\n    const board2D = this.blankGrid();\n    board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n    return board2D;\n  }\n\n  convertTo1D(board) {\n    const {\n      dimension\n    } = this,\n          board1D = Array(dimension * dimension).fill(0);\n    let counter = 0;\n\n    for (let row = 0; row < dimension; row++) {\n      for (let col = 0; col < dimension; col++) {\n        board1D[counter++] = board[col][row];\n      }\n    }\n\n    return board1D;\n  }\n\n  duplicate(board) {\n    const {\n      dimension\n    } = this,\n          copy = this.blankGrid();\n\n    for (let col = 0; col < dimension; col++) {\n      for (let row = 0; row < dimension; row++) {\n        copy[col][row] = board[col][row];\n      }\n    }\n\n    return copy;\n  }\n\n  isDifferent(arr1, arr2) {\n    const {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (arr1[i][j] !== arr2[i][j]) return true;\n      }\n    }\n\n    return false;\n  }\n\n  translate(row) {\n    const rowNumbers = row.filter(number => number);\n    const empties = Array(this.dimension - rowNumbers.length).fill(0);\n    return empties.concat(rowNumbers);\n  }\n\n  merge(row) {\n    for (let i = this.dimension - 1; i >= 1; i--) {\n      const val1 = row[i];\n      const val2 = row[i - 1];\n\n      if (val1 === val2) {\n        row[i] = val1 + val2;\n        row[i - 1] = 0;\n      }\n    }\n\n    return row;\n  }\n\n  turnBoard(board) {\n    for (let i = 0; i < this.dimension; i++) board[i].reverse();\n\n    return board;\n  }\n\n  transposeBoard(board) {\n    const transposedBoard = this.blankGrid(),\n          {\n      dimension\n    } = this;\n\n    for (let col = 0; col < dimension; col++) {\n      for (let row = 0; row < dimension; row++) {\n        transposedBoard[col][row] = board[row][col];\n      }\n    }\n\n    return transposedBoard;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/2048/src/Game.js"],"names":["Game","constructor","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","onMove","callback","moveCallback","wonGame","board","gameState","i","j","grid","setupNewGame","blankGrid","addNumber","convertTo1D","score","won","over","openings","push","col","row","target","move","direction","turned","transposed","notArrowKey","convertTo2D","turnBoard","transposeBoard","copy","duplicate","translate","merge","different","isDifferent","Array","fill","board2D","forEach","value","idx","board1D","counter","arr1","arr2","rowNumbers","filter","number","empties","concat","val1","val2","reverse","transposedBoard"],"mappings":"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","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        this.addNumber(board);\n        this.addNumber(board);\n\n        this.gameState = {\n            board: this.convertTo1D(board),\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n    }\n\n    move(direction) {\n        let turned = false, transposed = false, notArrowKey = false;\n        let board = this.convertTo2D(this.gameState.board);\n\n        switch(direction) {\n            case 'up':\n                board = this.turnBoard(board);\n                turned = true;\n                break;\n            case 'left':\n                board  = this.transposeBoard(board);\n                board = this.turnBoard(board);\n                turned = true;\n                transposed = true;\n                break;\n            case 'right':\n                board = this.transposeBoard(board);\n                transposed = true;\n                break;\n            default: notArrowKey = direction !== 'down';\n        }\n\n        if(notArrowKey)\n            return;\n\n        const copy = this.duplicate(board);\n\n        for(let i = 0; i < this.dimension; i++) \n            board[i] = this.translate(this.merge(this.translate(board[i])));\n\n        const different = this.isDifferent(copy, board);\n\n        if(turned)\n            board = this.turnBoard(board);\n        \n        if(transposed)\n            board = this.transposeBoard(board);\n\n        if(different)\n            this.addNumber(board);\n\n        \n        this.gameState.board = this.convertTo1D(board);\n        this.moveCallback(this);\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n\n    onMove = callback => this.moveCallback = callback;\n\n    convertTo2D(board) {\n        const board2D = this.blankGrid();\n        board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n        return board2D;\n    }\n\n    convertTo1D(board) {\n        const { dimension } = this, board1D = Array(dimension*dimension).fill(0);\n\n        let counter = 0;\n\n        for(let row = 0; row < dimension; row++) {\n            for(let col = 0; col < dimension; col++) {\n                board1D[counter++] = board[col][row];\n            }\n        }\n        return board1D;\n    }\n\n    duplicate(board) {\n        const { dimension } = this, copy = this.blankGrid();\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                copy[col][row] = board[col][row];\n            }\n        }\n\n        return copy;\n    }\n\n    isDifferent(arr1, arr2) {\n        const { dimension } = this;\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (arr1[i][j] !== arr2[i][j]) \n                    return true;\n            }\n        }\n        return false;\n    }\n\n    translate(row) {\n        const rowNumbers = row.filter(number => number);\n        const empties = Array(this.dimension-rowNumbers.length).fill(0);\n        return empties.concat(rowNumbers);\n    }\n\n    merge(row) {\n        for (let i = this.dimension-1; i >= 1; i--) {\n            const val1 = row[i];\n            const val2 = row[i-1];\n\n            if (val1 === val2) {\n                row[i] = val1 + val2;\n                row[i-1] = 0;\n            }\n        }\n        return row;\n    }\n\n    turnBoard(board) {\n        for(let i = 0; i < this.dimension; i++) \n            board[i].reverse();\n        return board;\n    }\n\n    transposeBoard(board) {\n        const transposedBoard = this.blankGrid(), { dimension } = this;\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                transposedBoard[col][row] = board[row][col];\n            }\n        }\n        \n        return transposedBoard;\n    }\n\n    wonGame = board => {\n        const { dimension } = this.gameState;\n        for (let i = 0; i < dimension; i++) {\n          for (let j = 0; j < dimension; j++) {\n            if (grid[i][j] == 2048) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}