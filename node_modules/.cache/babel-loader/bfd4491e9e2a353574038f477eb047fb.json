{"ast":null,"code":"import _classCallCheck from\"/home/mitchell/School/426/a07/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mitchell/School/426/a07/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Game=/*#__PURE__*/function(){function Game(_dimension){var _this=this;_classCallCheck(this,Game);this.getRandomNumber=function(){return Math.random()>.1?2:4;};this.getRandomArrayIndex=function(arr){return Math.floor(arr.length*Math.random());};this.isGameWon=function(board){var dimension=_this.dimension;for(var i=0;i<dimension;i++){for(var j=0;j<dimension;j++){if(board[i][j]===2048){return true;}}}return false;};this.isGameOver=function(board){var dimension=_this.dimension;for(var col=0;col<dimension;col++){for(var row=0;row<dimension;row++){if(board[col][row]===0||col!==dimension-1&&board[col][row]===board[col+1][row]||row!==dimension-1&&board[col][row]===board[col][row+1])return false;}}return true;};this.onMove=function(callback){return _this.moveCallback=callback;};this.onWin=function(callback){return _this.winCallback=callback;};this.onLose=function(callback){return _this.loseCallback=callback;};this.dimension=_dimension;this.setupNewGame();}_createClass(Game,[{key:\"setupNewGame\",value:function setupNewGame(){var board=this.blankGrid();this.addNumber(board);this.addNumber(board);this.gameState={board:this.convertTo1D(board),score:0,won:false,over:false};}},{key:\"loadGame\",value:function loadGame(gameState){this.gameState=gameState;}},{key:\"addNumber\",value:function addNumber(board){var openings=[],dimension=this.dimension;for(var i=0;i<dimension;i++){for(var j=0;j<dimension;j++){if(board[i][j]===0)openings.push({col:i,row:j});}}if(openings.length===0)return;var target=openings[this.getRandomArrayIndex(openings)];board[target.col][target.row]=this.getRandomNumber();}},{key:\"move\",value:function move(direction){var turned=false,transposed=false,notArrowKey=false;var board=this.convertTo2D(this.gameState.board);switch(direction){case'up':board=this.turnBoard(board);turned=true;break;case'left':board=this.transposeBoard(board);board=this.turnBoard(board);turned=true;transposed=true;break;case'right':board=this.transposeBoard(board);transposed=true;break;default:notArrowKey=direction!=='down';}if(notArrowKey)return;var copy=this.duplicate(board);for(var i=0;i<this.dimension;i++){board[i]=this.handle(board[i]);}var different=this.isDifferent(copy,board);if(turned)board=this.turnBoard(board);if(transposed)board=this.transposeBoard(board);if(different)this.addNumber(board);this.gameState.over=this.isGameOver(board);this.gameState.won=this.isGameWon(board);if(this.gameState.won&&this.winCallback)this.winCallback();else if(!this.gameState.won&&this.gameState.over&&this.loseCallback)this.loseCallback();this.gameState.board=this.convertTo1D(board);this.moveCallback(this);}},{key:\"handle\",value:function handle(row){return this.translate(this.merge(this.translate(row)));}},{key:\"blankGrid\",value:function blankGrid(){var grid=[],dimension=this.dimension;for(var i=0;i<dimension;i++){grid.push(Array(dimension).fill(0));}return grid;}},{key:\"convertTo2D\",value:function convertTo2D(board){var _this2=this;var board2D=this.blankGrid();board.forEach(function(value,idx){return board2D[Math.floor(idx%_this2.dimension)][Math.floor(idx/_this2.dimension)]=value;});return board2D;}},{key:\"convertTo1D\",value:function convertTo1D(board){var dimension=this.dimension,board1D=Array(dimension*dimension).fill(0);var counter=0;for(var row=0;row<dimension;row++){for(var col=0;col<dimension;col++){board1D[counter++]=board[col][row];}}return board1D;}},{key:\"duplicate\",value:function duplicate(board){var dimension=this.dimension,copy=this.blankGrid();for(var col=0;col<dimension;col++){for(var row=0;row<dimension;row++){copy[col][row]=board[col][row];}}return copy;}},{key:\"isDifferent\",value:function isDifferent(arr1,arr2){var dimension=this.dimension;for(var i=0;i<dimension;i++){for(var j=0;j<dimension;j++){if(arr1[i][j]!==arr2[i][j])return true;}}return false;}},{key:\"translate\",value:function translate(row){var rowNumbers=row.filter(function(number){return number;});var empties=Array(this.dimension-rowNumbers.length).fill(0);return empties.concat(rowNumbers);}},{key:\"merge\",value:function merge(row){for(var i=this.dimension-1;i>=1;i--){var val1=row[i];var val2=row[i-1];if(val1===val2){var combinedValue=val1+val2;row[i]=combinedValue;this.gameState.score+=combinedValue;row[i-1]=0;}}return row;}},{key:\"turnBoard\",value:function turnBoard(board){for(var i=0;i<this.dimension;i++){board[i].reverse();}return board;}},{key:\"transposeBoard\",value:function transposeBoard(board){var transposedBoard=this.blankGrid(),dimension=this.dimension;for(var col=0;col<dimension;col++){for(var row=0;row<dimension;row++){transposedBoard[col][row]=board[row][col];}}return transposedBoard;}},{key:\"getGameState\",value:function getGameState(){return this.gameState;}},{key:\"toString\",value:function toString(){var board=this.convertTo2D(this.gameState.board),dimension=this.dimension;for(var i=0;i<dimension;i++){console.log(board[i]);}}}]);return Game;}();export default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/a07/src/game.js"],"names":["Game","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","isGameWon","board","i","j","isGameOver","col","row","onMove","callback","moveCallback","onWin","winCallback","onLose","loseCallback","setupNewGame","blankGrid","addNumber","gameState","convertTo1D","score","won","over","openings","push","target","direction","turned","transposed","notArrowKey","convertTo2D","turnBoard","transposeBoard","copy","duplicate","handle","different","isDifferent","translate","merge","grid","Array","fill","board2D","forEach","value","idx","board1D","counter","arr1","arr2","rowNumbers","filter","number","empties","concat","val1","val2","combinedValue","reverse","transposedBoard","console","log"],"mappings":"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","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        this.addNumber(board);\n        this.addNumber(board);\n\n        this.gameState = {\n            board: this.convertTo1D(board),\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    loadGame(gameState) {\n        this.gameState = gameState;\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber();\n    }\n\n    move(direction) {\n        let turned = false, transposed = false, notArrowKey = false;\n        let board = this.convertTo2D(this.gameState.board);\n\n        switch(direction) {\n            case 'up':\n                board = this.turnBoard(board);\n                turned = true;\n                break;\n            case 'left':\n                board  = this.transposeBoard(board);\n                board = this.turnBoard(board);\n                turned = true;\n                transposed = true;\n                break;\n            case 'right':\n                board = this.transposeBoard(board);\n                transposed = true;\n                break;\n            default: notArrowKey = direction !== 'down';\n        }\n\n        if(notArrowKey)\n            return;\n\n        const copy = this.duplicate(board);\n\n        for(let i = 0; i < this.dimension; i++) \n            board[i] = this.handle(board[i]);\n\n        const different = this.isDifferent(copy, board);\n\n        if(turned)\n            board = this.turnBoard(board);\n        \n        if(transposed)\n            board = this.transposeBoard(board);\n\n        if(different)\n            this.addNumber(board);\n\n        \n        this.gameState.over = this.isGameOver(board);\n        this.gameState.won = this.isGameWon(board);\n\n        if(this.gameState.won && this.winCallback)\n            this.winCallback();\n        else if(!this.gameState.won && this.gameState.over && this.loseCallback)\n            this.loseCallback();\n        \n        this.gameState.board = this.convertTo1D(board);\n        this.moveCallback(this);\n    }\n\n    handle(row) {\n        return this.translate(this.merge(this.translate(row)));\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n\n    convertTo2D(board) {\n        const board2D = this.blankGrid();\n        board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n        return board2D;\n    }\n\n    convertTo1D(board) {\n        const { dimension } = this, board1D = Array(dimension*dimension).fill(0);\n\n        let counter = 0;\n\n        for(let row = 0; row < dimension; row++) {\n            for(let col = 0; col < dimension; col++) {\n                board1D[counter++] = board[col][row];\n            }\n        }\n        return board1D;\n    }\n\n    duplicate(board) {\n        const { dimension } = this, copy = this.blankGrid();\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                copy[col][row] = board[col][row];\n            }\n        }\n\n        return copy;\n    }\n\n    isDifferent(arr1, arr2) {\n        const { dimension } = this;\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (arr1[i][j] !== arr2[i][j]) \n                    return true;\n            }\n        }\n        return false;\n    }\n\n    translate(row) {\n        const rowNumbers = row.filter(number => number);\n        const empties = Array(this.dimension-rowNumbers.length).fill(0);\n        return empties.concat(rowNumbers);\n    }\n\n    merge(row) {\n        for (let i = this.dimension-1; i >= 1; i--) {\n            const val1 = row[i];\n            const val2 = row[i-1];\n\n            if (val1 === val2) {\n                const combinedValue = val1 + val2;\n                row[i] = combinedValue;\n                this.gameState.score += combinedValue;\n                row[i-1] = 0;\n            }\n        }\n        return row;\n    }\n\n    turnBoard(board) {\n        for(let i = 0; i < this.dimension; i++) \n            board[i].reverse();\n        return board;\n    }\n\n    transposeBoard(board) {\n        const transposedBoard = this.blankGrid(), { dimension } = this;\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                transposedBoard[col][row] = board[row][col];\n            }\n        }\n        \n        return transposedBoard;\n    }\n\n    isGameWon = board => {\n        const { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n          for (let j = 0; j < dimension; j++) {\n            if (board[i][j] === 2048) {\n              return true;\n            }\n          }\n        }\n        return false;\n    }\n\n    isGameOver = board => {\n\n        const { dimension } = this;\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                \n                if ((board[col][row] === 0) || (col !== dimension-1 && board[col][row] === board[col + 1][row]) \n                        || (row !== dimension-1 && board[col][row] === board[col][row + 1])) \n                    return false;\n            \n            }\n        }\n        return true;\n    }\n\n    getGameState() {\n        return this.gameState;\n    }\n\n    toString() {\n        const board = this.convertTo2D(this.gameState.board), { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            console.log(board[i]);\n        }\n    }\n\n    onMove = callback => this.moveCallback = callback;\n    onWin = callback => this.winCallback = callback;\n    onLose = callback => this.loseCallback = callback;\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}