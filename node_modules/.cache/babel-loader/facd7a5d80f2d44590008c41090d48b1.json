{"ast":null,"code":"class Game {\n  constructor(dimension) {\n    this.getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n\n    this.getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    this.dimension = dimension;\n    this.setupNewGame();\n  }\n\n  setupNewGame() {\n    const board = this.blankGrid(); //this.addNumber(board);\n    //this.addNumber(board);\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        openings.push({\n          col: i,\n          row: j\n        });\n      }\n    }\n\n    this.gameState = {\n      board: board,\n      score: 0,\n      won: false,\n      over: false\n    };\n  }\n\n  addNumber(board) {\n    const openings = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (board[i][j] === 0) openings.push({\n          col: i,\n          row: j\n        });\n      }\n    }\n\n    if (openings.length === 0) return;\n    const target = openings[this.getRandomArrayIndex(openings)];\n    board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n  }\n\n  blankGrid() {\n    const grid = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      grid.push(Array(dimension).fill(0));\n    }\n\n    return grid;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/2048/src/Game.js"],"names":["Game","constructor","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","setupNewGame","board","blankGrid","i","j","openings","push","col","row","gameState","score","won","over","addNumber","target","grid","Array","fill"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AAEPC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SA2CvBC,eA3CuB,GA2CL,MAAMC,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAArB,GAAyB,CA3C1B;;AAAA,SA4CvBC,mBA5CuB,GA4CDC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWD,GAAG,CAACE,MAAJ,GAAaL,IAAI,CAACC,MAAL,EAAxB,CA5CN;;AACnB,SAAKH,SAAL,GAAiBA,SAAjB;AACA,SAAKQ,YAAL;AACH;;AAEDA,EAAAA,YAAY,GAAG;AACX,UAAMC,KAAK,GAAI,KAAKC,SAAL,EAAf,CADW,CAEX;AACA;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBC,QAAAA,QAAQ,CAACC,IAAT,CAAc;AAACC,UAAAA,GAAG,EAAEJ,CAAN;AAASK,UAAAA,GAAG,EAAEJ;AAAd,SAAd;AAEH;AACJ;;AAED,SAAKK,SAAL,GAAiB;AACbR,MAAAA,KAAK,EAAEA,KADM;AAEbS,MAAAA,KAAK,EAAE,CAFM;AAGbC,MAAAA,GAAG,EAAE,KAHQ;AAIbC,MAAAA,IAAI,EAAE;AAJO,KAAjB;AAMH;;AAEDC,EAAAA,SAAS,CAACZ,KAAD,EAAQ;AACb,UAAMI,QAAQ,GAAG,EAAjB;AAAA,UAAqB;AAAEb,MAAAA;AAAF,QAAgB,IAArC;;AAEA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,SAApB,EAA+BW,CAAC,EAAhC,EAAoC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAApB,EAA+BY,CAAC,EAAhC,EAAoC;AAChC,YAAIH,KAAK,CAACE,CAAD,CAAL,CAASC,CAAT,MAAgB,CAApB,EACIC,QAAQ,CAACC,IAAT,CAAc;AAACC,UAAAA,GAAG,EAAEJ,CAAN;AAASK,UAAAA,GAAG,EAAEJ;AAAd,SAAd;AAEP;AACJ;;AAED,QAAGC,QAAQ,CAACN,MAAT,KAAoB,CAAvB,EACI;AAEJ,UAAMe,MAAM,GAAGT,QAAQ,CAAC,KAAKT,mBAAL,CAAyBS,QAAzB,CAAD,CAAvB;AACAJ,IAAAA,KAAK,CAACa,MAAM,CAACP,GAAR,CAAL,CAAkBO,MAAM,CAACN,GAAzB,IAAgC,KAAKf,eAAL,KAAyB,GAAzB,GAA+B,CAA/B,GAAmC,CAAnE;AACH;;AAKDS,EAAAA,SAAS,GAAG;AACR,UAAMa,IAAI,GAAG,EAAb;AAAA,UAAiB;AAAEvB,MAAAA;AAAF,QAAgB,IAAjC;;AACA,SAAI,IAAIW,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,SAAnB,EAA8BW,CAAC,EAA/B,EAAmC;AAC/BY,MAAAA,IAAI,CAACT,IAAL,CAAUU,KAAK,CAACxB,SAAD,CAAL,CAAiByB,IAAjB,CAAsB,CAAtB,CAAV;AACH;;AACD,WAAOF,IAAP;AACH;;AAtDM;;AAyDX,eAAezB,IAAf","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        //this.addNumber(board);\n        //this.addNumber(board);\n\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                openings.push({col: i, row: j});\n                \n            }\n        }\n\n        this.gameState = {\n            board: board,\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}