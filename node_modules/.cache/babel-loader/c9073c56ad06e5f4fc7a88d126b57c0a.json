{"ast":null,"code":"class Game {\n  constructor(_dimension) {\n    this.getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n\n    this.getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    this.isGameWon = board => {\n      const {\n        dimension\n      } = this;\n\n      for (let i = 0; i < dimension; i++) {\n        for (let j = 0; j < dimension; j++) {\n          if (board[i][j] === 2048) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    this.isGameOver = board => {\n      const {\n        dimension\n      } = this;\n\n      for (let col = 0; col < dimension; col++) {\n        for (let row = 0; row < dimension; row++) {\n          if (board[col][row] === 0 || col !== dimension - 1 && board[col][row] === board[col + 1][row] || row !== dimension - 1 && board[col][row] === board[col][row + 1]) return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.onMove = callback => this.moveCallback = callback;\n\n    this.onMove = callback => this.moveCallback = callback;\n\n    this.onMove = callback => this.moveCallback = callback;\n\n    this.dimension = _dimension;\n    this.setupNewGame();\n  }\n\n  setupNewGame() {\n    const board = this.blankGrid();\n    this.addNumber(board);\n    this.addNumber(board);\n    this.gameState = {\n      board: this.convertTo1D(board),\n      score: 0,\n      won: false,\n      over: false\n    };\n  }\n\n  loadGame(gameState) {\n    this.gameState = gameState;\n  }\n\n  addNumber(board) {\n    const openings = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (board[i][j] === 0) openings.push({\n          col: i,\n          row: j\n        });\n      }\n    }\n\n    if (openings.length === 0) return;\n    const target = openings[this.getRandomArrayIndex(openings)];\n    board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n  }\n\n  move(direction) {\n    let turned = false,\n        transposed = false,\n        notArrowKey = false;\n    let board = this.convertTo2D(this.gameState.board);\n\n    switch (direction) {\n      case 'up':\n        board = this.turnBoard(board);\n        turned = true;\n        break;\n\n      case 'left':\n        board = this.transposeBoard(board);\n        board = this.turnBoard(board);\n        turned = true;\n        transposed = true;\n        break;\n\n      case 'right':\n        board = this.transposeBoard(board);\n        transposed = true;\n        break;\n\n      default:\n        notArrowKey = direction !== 'down';\n    }\n\n    if (notArrowKey) return;\n    const copy = this.duplicate(board);\n\n    for (let i = 0; i < this.dimension; i++) board[i] = this.translate(this.merge(this.translate(board[i])));\n\n    const different = this.isDifferent(copy, board);\n    if (turned) board = this.turnBoard(board);\n    if (transposed) board = this.transposeBoard(board);\n    if (different) this.addNumber(board);\n    this.gameState.over = this.isGameOver(board);\n    this.gameState.won = this.isGameWon(board);\n    this.gameState.board = this.convertTo1D(board);\n    this.moveCallback(this);\n  }\n\n  blankGrid() {\n    const grid = [],\n          {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      grid.push(Array(dimension).fill(0));\n    }\n\n    return grid;\n  }\n\n  convertTo2D(board) {\n    const board2D = this.blankGrid();\n    board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n    return board2D;\n  }\n\n  convertTo1D(board) {\n    const {\n      dimension\n    } = this,\n          board1D = Array(dimension * dimension).fill(0);\n    let counter = 0;\n\n    for (let row = 0; row < dimension; row++) {\n      for (let col = 0; col < dimension; col++) {\n        board1D[counter++] = board[col][row];\n      }\n    }\n\n    return board1D;\n  }\n\n  duplicate(board) {\n    const {\n      dimension\n    } = this,\n          copy = this.blankGrid();\n\n    for (let col = 0; col < dimension; col++) {\n      for (let row = 0; row < dimension; row++) {\n        copy[col][row] = board[col][row];\n      }\n    }\n\n    return copy;\n  }\n\n  isDifferent(arr1, arr2) {\n    const {\n      dimension\n    } = this;\n\n    for (let i = 0; i < dimension; i++) {\n      for (let j = 0; j < dimension; j++) {\n        if (arr1[i][j] !== arr2[i][j]) return true;\n      }\n    }\n\n    return false;\n  }\n\n  translate(row) {\n    const rowNumbers = row.filter(number => number);\n    const empties = Array(this.dimension - rowNumbers.length).fill(0);\n    return empties.concat(rowNumbers);\n  }\n\n  merge(row) {\n    for (let i = this.dimension - 1; i >= 1; i--) {\n      const val1 = row[i];\n      const val2 = row[i - 1];\n\n      if (val1 === val2) {\n        const combinedValue = val1 + val2;\n        row[i] = combinedValue;\n        this.gameState.score += combinedValue;\n        row[i - 1] = 0;\n      }\n    }\n\n    return row;\n  }\n\n  turnBoard(board) {\n    for (let i = 0; i < this.dimension; i++) board[i].reverse();\n\n    return board;\n  }\n\n  transposeBoard(board) {\n    const transposedBoard = this.blankGrid(),\n          {\n      dimension\n    } = this;\n\n    for (let col = 0; col < dimension; col++) {\n      for (let row = 0; row < dimension; row++) {\n        transposedBoard[col][row] = board[row][col];\n      }\n    }\n\n    return transposedBoard;\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/mitchell/School/426/2048/src/Game.js"],"names":["Game","constructor","dimension","getRandomNumber","Math","random","getRandomArrayIndex","arr","floor","length","isGameWon","board","i","j","isGameOver","col","row","onMove","callback","moveCallback","setupNewGame","blankGrid","addNumber","gameState","convertTo1D","score","won","over","loadGame","openings","push","target","move","direction","turned","transposed","notArrowKey","convertTo2D","turnBoard","transposeBoard","copy","duplicate","translate","merge","different","isDifferent","grid","Array","fill","board2D","forEach","value","idx","board1D","counter","arr1","arr2","rowNumbers","filter","number","empties","concat","val1","val2","combinedValue","reverse","transposedBoard"],"mappings":"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","sourcesContent":["class Game {\n    \n    constructor(dimension) {\n        this.dimension = dimension;\n        this.setupNewGame()\n    }\n\n    setupNewGame() {\n        const board  = this.blankGrid();\n        this.addNumber(board);\n        this.addNumber(board);\n\n        this.gameState = {\n            board: this.convertTo1D(board),\n            score: 0,\n            won: false,\n            over: false\n        }\n    }\n\n    loadGame(gameState) {\n        this.gameState = gameState;\n    }\n\n    addNumber(board) {\n        const openings = [], { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (board[i][j] === 0) \n                    openings.push({col: i, row: j});\n                \n            }\n        }\n\n        if(openings.length === 0)\n            return;\n\n        const target = openings[this.getRandomArrayIndex(openings)];\n        board[target.col][target.row] = this.getRandomNumber() > 0.1 ? 2 : 4;\n    }\n\n    move(direction) {\n        let turned = false, transposed = false, notArrowKey = false;\n        let board = this.convertTo2D(this.gameState.board);\n\n        switch(direction) {\n            case 'up':\n                board = this.turnBoard(board);\n                turned = true;\n                break;\n            case 'left':\n                board  = this.transposeBoard(board);\n                board = this.turnBoard(board);\n                turned = true;\n                transposed = true;\n                break;\n            case 'right':\n                board = this.transposeBoard(board);\n                transposed = true;\n                break;\n            default: notArrowKey = direction !== 'down';\n        }\n\n        if(notArrowKey)\n            return;\n\n        const copy = this.duplicate(board);\n\n        for(let i = 0; i < this.dimension; i++) \n            board[i] = this.translate(this.merge(this.translate(board[i])));\n\n        const different = this.isDifferent(copy, board);\n\n        if(turned)\n            board = this.turnBoard(board);\n        \n        if(transposed)\n            board = this.transposeBoard(board);\n\n        if(different)\n            this.addNumber(board);\n\n        \n        this.gameState.over = this.isGameOver(board);\n        this.gameState.won = this.isGameWon(board);\n        \n        this.gameState.board = this.convertTo1D(board);\n        this.moveCallback(this);\n    }\n\n    getRandomNumber = () => Math.random() > .1 ? 2 : 4;\n    getRandomArrayIndex = arr => Math.floor(arr.length * Math.random());\n\n    blankGrid() {\n        const grid = [], { dimension } = this;\n        for(let i = 0; i < dimension; i++) {\n            grid.push(Array(dimension).fill(0));\n        }\n        return grid;\n    }\n\n    convertTo2D(board) {\n        const board2D = this.blankGrid();\n        board.forEach((value, idx) => board2D[Math.floor(idx % this.dimension)][Math.floor(idx / this.dimension)] = value);\n        return board2D;\n    }\n\n    convertTo1D(board) {\n        const { dimension } = this, board1D = Array(dimension*dimension).fill(0);\n\n        let counter = 0;\n\n        for(let row = 0; row < dimension; row++) {\n            for(let col = 0; col < dimension; col++) {\n                board1D[counter++] = board[col][row];\n            }\n        }\n        return board1D;\n    }\n\n    duplicate(board) {\n        const { dimension } = this, copy = this.blankGrid();\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                copy[col][row] = board[col][row];\n            }\n        }\n\n        return copy;\n    }\n\n    isDifferent(arr1, arr2) {\n        const { dimension } = this;\n        for (let i = 0; i < dimension; i++) {\n            for (let j = 0; j < dimension; j++) {\n                if (arr1[i][j] !== arr2[i][j]) \n                    return true;\n            }\n        }\n        return false;\n    }\n\n    translate(row) {\n        const rowNumbers = row.filter(number => number);\n        const empties = Array(this.dimension-rowNumbers.length).fill(0);\n        return empties.concat(rowNumbers);\n    }\n\n    merge(row) {\n        for (let i = this.dimension-1; i >= 1; i--) {\n            const val1 = row[i];\n            const val2 = row[i-1];\n\n            if (val1 === val2) {\n                const combinedValue = val1 + val2;\n                row[i] = combinedValue;\n                this.gameState.score += combinedValue;\n                row[i-1] = 0;\n            }\n        }\n        return row;\n    }\n\n    turnBoard(board) {\n        for(let i = 0; i < this.dimension; i++) \n            board[i].reverse();\n        return board;\n    }\n\n    transposeBoard(board) {\n        const transposedBoard = this.blankGrid(), { dimension } = this;\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                transposedBoard[col][row] = board[row][col];\n            }\n        }\n        \n        return transposedBoard;\n    }\n\n    isGameWon = board => {\n        const { dimension } = this;\n\n        for (let i = 0; i < dimension; i++) {\n          for (let j = 0; j < dimension; j++) {\n            if (board[i][j] === 2048) {\n              return true;\n            }\n          }\n        }\n        return false;\n    }\n\n    isGameOver = board => {\n\n        const { dimension } = this;\n\n        for (let col = 0; col < dimension; col++) {\n            for (let row = 0; row < dimension; row++) {\n                \n                if ((board[col][row] === 0) || (col !== dimension-1 && board[col][row] === board[col + 1][row]) \n                        || (row !== dimension-1 && board[col][row] === board[col][row + 1])) \n                    return false;\n            \n            }\n        }\n        return true;\n    }\n\n    onMove = callback => this.moveCallback = callback;\n    onMove = callback => this.moveCallback = callback;\n    onMove = callback => this.moveCallback = callback;\n\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}